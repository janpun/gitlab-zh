{"version":3,"sources":["webpack:///./blob/balsamiq/balsamiq_viewer.js","webpack:///./blob/balsamiq_viewer.js"],"names":["PREVIEW_TEMPLATE","Object","underscore","_template","balsamiq_viewer","BalsamiqViewer","viewer","_classCallCheck","this","endpoint","_this","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","loadEvent","fileLoaded","onerror","send","target","status","renderFile","_this2","container","document","createElement","initDatabase","response","getPreviews","forEach","preview","renderedPreview","renderPreview","appendChild","classList","add","data","previewBinary","Uint8Array","database","sql_default","a","Database","exec","values","map","parsePreview","resourceID","previewElement","innerHTML","renderTemplate","resource","getResource","name","parseTitle","image","JSON","parse","onError","flash_0","loadBalsamiqFile","getElementById","Element","dataset","loadFile","catch"],"mappings":"wXAGA,IAAMA,EAAmBC,OAAAC,EAAA,SAAAD,CAAAE,4MA8GzBC,aApGE,SAAAC,EAAYC,gGAAQC,CAAAC,KAAAH,GAClBG,KAAKF,OAASA,6CAGPG,GAAU,IAAAC,EAAAF,KACjB,OAAO,IAAIG,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,MAAOP,GAAU,GAC1BK,EAAIG,aAAe,cACnBH,EAAII,OAAS,SAAAC,GAAA,OAAaT,EAAKU,WAAWD,EAAWP,EAASC,IAC9DC,EAAIO,QAAUR,EAEdC,EAAIQ,4CAIGH,EAAWP,EAASC,GAC7B,OAAgC,MAA5BM,EAAUI,OAAOC,OAAuBX,KAE5CL,KAAKiB,WAAWN,GAETP,wCAGEO,GAAW,IAAAO,EAAAlB,KACdmB,EAAYC,SAASC,cAAc,MAEzCrB,KAAKsB,aAAaX,EAAUI,OAAOQ,UAElBvB,KAAKwB,cACbC,QAAQ,SAACC,GAChB,IAAMC,EAAkBT,EAAKU,cAAcF,GAE3CP,EAAUU,YAAYF,KAGxBR,EAAUW,UAAUC,IAAI,eACxBZ,EAAUW,UAAUC,IAAI,YAExB/B,KAAKF,OAAO+B,YAAYV,wCAGba,GACX,IAAMC,EAAgB,IAAIC,WAAWF,GAErChC,KAAKmC,SAAW,IAAIC,EAAAC,EAAMC,SAASL,yCAMnC,OAFmBjC,KAAKmC,SAASI,KAAK,4BAEpB,GAAGC,OAAOC,IAAI5C,EAAe6C,kDAGrCC,GAGV,OAFkB3C,KAAKmC,SAASI,KAAd,uCAA0DI,EAA1D,KAED,yCAGLjB,GACZ,IAAMkB,EAAiBxB,SAASC,cAAc,MAK9C,OAHAuB,EAAed,UAAUC,IAAI,WAC7Ba,EAAeC,UAAY7C,KAAK8C,eAAepB,GAExCkB,yCAGMlB,GACb,IAAMqB,EAAW/C,KAAKgD,YAAYtB,EAAQiB,YACpCM,EAAOpD,EAAeqD,WAAWH,GAC/BI,EAAUzB,EAAVyB,MAOR,OALiB3D,GACfyD,OACAE,iDAMgBzB,GAClB,OAAO0B,KAAKC,MAAM3B,EAAQ,uCAWVqB,GAChB,OAAOK,KAAKC,MAAMN,EAASP,OAAO,GAAG,IAAIS,cC1G7C,SAASK,IAGP,OAFc,IAAIC,EAAA,EAAM,sCAKX,SAASC,IACtB,IAAM1D,EAASsB,SAASqC,eAAe,sBAEvC,GAAM3D,aAAkB4D,QAAxB,CAHyC,IAKjCzD,EAAaH,EAAO6D,QAApB1D,SAEe,IAAIL,EAAeE,GAC3B8D,SAAS3D,GAAU4D,MAAMP","file":"balsamiq_viewer.6594250b.chunk.js","sourcesContent":["import sqljs from 'sql.js';\nimport { template as _template } from 'underscore';\n\nconst PREVIEW_TEMPLATE = _template(`\n  <div class=\"card\">\n    <div class=\"card-header\"><%- name %></div>\n    <div class=\"card-body\">\n      <img class=\"img-thumbnail\" src=\"data:image/png;base64,<%- image %>\"/>\n    </div>\n  </div>\n`);\n\nclass BalsamiqViewer {\n  constructor(viewer) {\n    this.viewer = viewer;\n  }\n\n  loadFile(endpoint) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.open('GET', endpoint, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = loadEvent => this.fileLoaded(loadEvent, resolve, reject);\n      xhr.onerror = reject;\n\n      xhr.send();\n    });\n  }\n\n  fileLoaded(loadEvent, resolve, reject) {\n    if (loadEvent.target.status !== 200) return reject();\n\n    this.renderFile(loadEvent);\n\n    return resolve();\n  }\n\n  renderFile(loadEvent) {\n    const container = document.createElement('ul');\n\n    this.initDatabase(loadEvent.target.response);\n\n    const previews = this.getPreviews();\n    previews.forEach((preview) => {\n      const renderedPreview = this.renderPreview(preview);\n\n      container.appendChild(renderedPreview);\n    });\n\n    container.classList.add('list-inline');\n    container.classList.add('previews');\n\n    this.viewer.appendChild(container);\n  }\n\n  initDatabase(data) {\n    const previewBinary = new Uint8Array(data);\n\n    this.database = new sqljs.Database(previewBinary);\n  }\n\n  getPreviews() {\n    const thumbnails = this.database.exec('SELECT * FROM thumbnails');\n\n    return thumbnails[0].values.map(BalsamiqViewer.parsePreview);\n  }\n\n  getResource(resourceID) {\n    const resources = this.database.exec(`SELECT * FROM resources WHERE id = '${resourceID}'`);\n\n    return resources[0];\n  }\n\n  renderPreview(preview) {\n    const previewElement = document.createElement('li');\n\n    previewElement.classList.add('preview');\n    previewElement.innerHTML = this.renderTemplate(preview);\n\n    return previewElement;\n  }\n\n  renderTemplate(preview) {\n    const resource = this.getResource(preview.resourceID);\n    const name = BalsamiqViewer.parseTitle(resource);\n    const { image } = preview;\n\n    const template = PREVIEW_TEMPLATE({\n      name,\n      image,\n    });\n\n    return template;\n  }\n\n  static parsePreview(preview) {\n    return JSON.parse(preview[1]);\n  }\n\n  /*\n   * resource = {\n   *   columns: ['ID', 'BRANCHID', 'ATTRIBUTES', 'DATA'],\n   *   values: [['id', 'branchId', 'attributes', 'data']],\n   * }\n   *\n   * 'attributes' being a JSON string containing the `name` property.\n   */\n  static parseTitle(resource) {\n    return JSON.parse(resource.values[0][2]).name;\n  }\n}\n\nexport default BalsamiqViewer;\n","import Flash from '../flash';\nimport BalsamiqViewer from './balsamiq/balsamiq_viewer';\n\nfunction onError() {\n  const flash = new Flash('Balsamiq file could not be loaded.');\n\n  return flash;\n}\n\nexport default function loadBalsamiqFile() {\n  const viewer = document.getElementById('js-balsamiq-viewer');\n\n  if (!(viewer instanceof Element)) return;\n\n  const { endpoint } = viewer.dataset;\n\n  const balsamiqViewer = new BalsamiqViewer(viewer);\n  balsamiqViewer.loadFile(endpoint).catch(onError);\n}\n"],"sourceRoot":""}