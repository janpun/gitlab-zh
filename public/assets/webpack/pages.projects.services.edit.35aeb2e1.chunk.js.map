{"version":3,"sources":["webpack:///./integrations/integration_settings_form.js","webpack:///./prometheus_metrics/constants.js","webpack:///./prometheus_metrics/prometheus_metrics.js","webpack:///./pages/projects/services/edit/index.js"],"names":["IntegrationSettingsForm","formSelector","_classCallCheck","this","$form","jquery_default","canTestService","data","testEndPoint","$serviceToggle","find","$submitBtn","$submitBtnLoader","$submitBtnLabel","_this","toggleServiceState","is","on","e","handleServiceToggle","handleSettingsSave","get","checkValidity","preventDefault","testSettings","serialize","currentTarget","serviceActive","toggleSubmitBtnLabel","removeAttr","attr","btnLabel","text","saveTestActive","disable","removeClass","enable","addClass","formData","_this2","toggleSubmitBtnState","axios_utils","put","then","_ref","error","flashActions","test_failed","title","clickHandler","submit","Object","flash","message","service_response","document","catch","constants","PrometheusMetrics","wrapperSelector","prometheus_metrics_classCallCheck","backOffRequestCounter","$wrapper","$monitoredMetricsPanel","$monitoredMetricsCount","$monitoredMetricsLoading","$monitoredMetricsEmpty","$monitoredMetricsList","$missingEnvVarPanel","$panelToggle","$missingEnvVarMetricCount","$missingEnvVarMetricsList","activeMetricsEndpoint","helpMetricsPath","handlePanelToggle","$toggleBtn","closest","toggleClass","hasClass","stateName","metrics","totalMonitoredMetrics","totalMissingEnvVarMetrics","totalExporters","forEach","metric","active_metrics","append","underscore_default","a","escape","group","metrics_missing_requirements","emptyCommonMetricsText","locale","docsUrl","empty","showMonitoringMetricsPanelState","metricsCountText","exporters","_this3","common_utils","next","stop","success","res","length","populateActiveMetrics","addEventListener","prometheusSettingsWrapper","querySelector","integration_settings_form","init","prometheus_metrics","loadActiveMetrics"],"mappings":"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","file":"pages.projects.services.edit.35aeb2e1.chunk.js","sourcesContent":["import $ from 'jquery';\nimport axios from '../lib/utils/axios_utils';\nimport flash from '../flash';\n\nexport default class IntegrationSettingsForm {\n  constructor(formSelector) {\n    this.$form = $(formSelector);\n\n    // Form Metadata\n    this.canTestService = this.$form.data('canTest');\n    this.testEndPoint = this.$form.data('testUrl');\n\n    // Form Child Elements\n    this.$serviceToggle = this.$form.find('#service_active');\n    this.$submitBtn = this.$form.find('button[type=\"submit\"]');\n    this.$submitBtnLoader = this.$submitBtn.find('.js-btn-spinner');\n    this.$submitBtnLabel = this.$submitBtn.find('.js-btn-label');\n  }\n\n  init() {\n    // Initialize View\n    this.toggleServiceState(this.$serviceToggle.is(':checked'));\n\n    // Bind Event Listeners\n    this.$serviceToggle.on('change', e => this.handleServiceToggle(e));\n    this.$submitBtn.on('click', e => this.handleSettingsSave(e));\n  }\n\n  handleSettingsSave(e) {\n    // Check if Service is marked active, as if not marked active,\n    // We can skip testing it and directly go ahead to allow form to\n    // be submitted\n    if (!this.$serviceToggle.is(':checked')) {\n      return;\n    }\n\n    // Service was marked active so now we check;\n    // 1) If form contents are valid\n    // 2) If this service can be tested\n    // If both conditions are true, we override form submission\n    // and test the service using provided configuration.\n    if (this.$form.get(0).checkValidity() && this.canTestService) {\n      e.preventDefault();\n      this.testSettings(this.$form.serialize());\n    }\n  }\n\n  handleServiceToggle(e) {\n    this.toggleServiceState($(e.currentTarget).is(':checked'));\n  }\n\n  /**\n   * Change Form's validation enforcement based on service status (active/inactive)\n   */\n  toggleServiceState(serviceActive) {\n    this.toggleSubmitBtnLabel(serviceActive);\n    if (serviceActive) {\n      this.$form.removeAttr('novalidate');\n    } else if (!this.$form.attr('novalidate')) {\n      this.$form.attr('novalidate', 'novalidate');\n    }\n  }\n\n  /**\n   * Toggle Submit button label based on Integration status and ability to test service\n   */\n  toggleSubmitBtnLabel(serviceActive) {\n    let btnLabel = 'Save changes';\n\n    if (serviceActive && this.canTestService) {\n      btnLabel = 'Test settings and save changes';\n    }\n\n    this.$submitBtnLabel.text(btnLabel);\n  }\n\n  /**\n   * Toggle Submit button state based on provided boolean value of `saveTestActive`\n   * When enabled, it does two things, and reverts back when disabled\n   *\n   * 1. It shows load spinner on submit button\n   * 2. Makes submit button disabled\n   */\n  toggleSubmitBtnState(saveTestActive) {\n    if (saveTestActive) {\n      this.$submitBtn.disable();\n      this.$submitBtnLoader.removeClass('hidden');\n    } else {\n      this.$submitBtn.enable();\n      this.$submitBtnLoader.addClass('hidden');\n    }\n  }\n\n  /**\n   * Test Integration config\n   */\n  testSettings(formData) {\n    this.toggleSubmitBtnState(true);\n\n    return axios.put(this.testEndPoint, formData)\n      .then(({ data }) => {\n        if (data.error) {\n          let flashActions;\n\n          if (data.test_failed) {\n            flashActions = {\n              title: 'Save anyway',\n              clickHandler: (e) => {\n                e.preventDefault();\n                this.$form.submit();\n              },\n            };\n          }\n\n          flash(`${data.message} ${data.service_response}`, 'alert', document, flashActions);\n        } else {\n          this.$form.submit();\n        }\n\n        this.toggleSubmitBtnState(false);\n      })\n      .catch(() => {\n        flash('Something went wrong on our end.');\n        this.toggleSubmitBtnState(false);\n      });\n  }\n}\n","export default {\n  EMPTY: 'empty',\n  LOADING: 'loading',\n  LIST: 'list',\n};\n","import $ from 'jquery';\nimport _ from 'underscore';\nimport { s__, n__, sprintf } from '~/locale';\nimport axios from '../lib/utils/axios_utils';\nimport PANEL_STATE from './constants';\nimport { backOff } from '../lib/utils/common_utils';\n\nexport default class PrometheusMetrics {\n  constructor(wrapperSelector) {\n    this.backOffRequestCounter = 0;\n\n    this.$wrapper = $(wrapperSelector);\n\n    this.$monitoredMetricsPanel = this.$wrapper.find('.js-panel-monitored-metrics');\n    this.$monitoredMetricsCount = this.$monitoredMetricsPanel.find('.js-monitored-count');\n    this.$monitoredMetricsLoading = this.$monitoredMetricsPanel.find('.js-loading-metrics');\n    this.$monitoredMetricsEmpty = this.$monitoredMetricsPanel.find('.js-empty-metrics');\n    this.$monitoredMetricsList = this.$monitoredMetricsPanel.find('.js-metrics-list');\n\n    this.$missingEnvVarPanel = this.$wrapper.find('.js-panel-missing-env-vars');\n    this.$panelToggle = this.$missingEnvVarPanel.find('.js-panel-toggle');\n    this.$missingEnvVarMetricCount = this.$missingEnvVarPanel.find('.js-env-var-count');\n    this.$missingEnvVarMetricsList = this.$missingEnvVarPanel.find('.js-missing-var-metrics-list');\n\n    this.activeMetricsEndpoint = this.$monitoredMetricsPanel.data('activeMetrics');\n    this.helpMetricsPath = this.$monitoredMetricsPanel.data('metrics-help-path');\n\n    this.$panelToggle.on('click', e => this.handlePanelToggle(e));\n  }\n\n  /* eslint-disable class-methods-use-this */\n  handlePanelToggle(e) {\n    const $toggleBtn = $(e.currentTarget);\n    const $currentPanelBody = $toggleBtn.closest('.card').find('.card-body');\n    $currentPanelBody.toggleClass('hidden');\n    if ($toggleBtn.hasClass('fa-caret-down')) {\n      $toggleBtn.removeClass('fa-caret-down').addClass('fa-caret-right');\n    } else {\n      $toggleBtn.removeClass('fa-caret-right').addClass('fa-caret-down');\n    }\n  }\n\n  showMonitoringMetricsPanelState(stateName) {\n    switch (stateName) {\n      case PANEL_STATE.LOADING:\n        this.$monitoredMetricsLoading.removeClass('hidden');\n        this.$monitoredMetricsEmpty.addClass('hidden');\n        this.$monitoredMetricsList.addClass('hidden');\n        break;\n      case PANEL_STATE.LIST:\n        this.$monitoredMetricsLoading.addClass('hidden');\n        this.$monitoredMetricsEmpty.addClass('hidden');\n        this.$monitoredMetricsList.removeClass('hidden');\n        break;\n      default:\n        this.$monitoredMetricsLoading.addClass('hidden');\n        this.$monitoredMetricsEmpty.removeClass('hidden');\n        this.$monitoredMetricsList.addClass('hidden');\n        break;\n    }\n  }\n\n  populateActiveMetrics(metrics) {\n    let totalMonitoredMetrics = 0;\n    let totalMissingEnvVarMetrics = 0;\n    let totalExporters = 0;\n\n    metrics.forEach((metric) => {\n      if (metric.active_metrics > 0) {\n        totalExporters += 1;\n        this.$monitoredMetricsList.append(`<li>${_.escape(metric.group)}<span class=\"badge\">${_.escape(metric.active_metrics)}</span></li>`);\n        totalMonitoredMetrics += metric.active_metrics;\n        if (metric.metrics_missing_requirements > 0) {\n          this.$missingEnvVarMetricsList.append(`<li>${_.escape(metric.group)}</li>`);\n          totalMissingEnvVarMetrics += 1;\n        }\n      }\n    });\n\n    if (totalMonitoredMetrics === 0) {\n      const emptyCommonMetricsText = sprintf(s__('PrometheusService|<p class=\"text-tertiary\">No <a href=\"%{docsUrl}\">common metrics</a> were found</p>'), {\n        docsUrl: this.helpMetricsPath,\n      }, false);\n      this.$monitoredMetricsEmpty.empty();\n      this.$monitoredMetricsEmpty.append(emptyCommonMetricsText);\n      this.showMonitoringMetricsPanelState(PANEL_STATE.EMPTY);\n    } else {\n      const metricsCountText = sprintf(s__('PrometheusService|%{exporters} with %{metrics} were found'), {\n        exporters: n__('%d exporter', '%d exporters', totalExporters),\n        metrics: n__('%d metric', '%d metrics', totalMonitoredMetrics),\n      });\n      this.$monitoredMetricsCount.text(metricsCountText);\n      this.showMonitoringMetricsPanelState(PANEL_STATE.LIST);\n\n      if (totalMissingEnvVarMetrics > 0) {\n        this.$missingEnvVarPanel.removeClass('hidden');\n        this.$missingEnvVarMetricCount.text(totalMissingEnvVarMetrics);\n      }\n    }\n  }\n\n  loadActiveMetrics() {\n    this.showMonitoringMetricsPanelState(PANEL_STATE.LOADING);\n    backOff((next, stop) => {\n      axios.get(this.activeMetricsEndpoint)\n        .then(({ data }) => {\n          if (data && data.success) {\n            stop(data);\n          } else {\n            this.backOffRequestCounter += 1;\n            if (this.backOffRequestCounter < 3) {\n              next();\n            } else {\n              stop(data);\n            }\n          }\n        })\n        .catch(stop);\n    })\n      .then((res) => {\n        if (res && res.data && res.data.length) {\n          this.populateActiveMetrics(res.data);\n        } else {\n          this.showMonitoringMetricsPanelState(PANEL_STATE.EMPTY);\n        }\n      })\n      .catch(() => {\n        this.showMonitoringMetricsPanelState(PANEL_STATE.EMPTY);\n      });\n  }\n}\n","import IntegrationSettingsForm from '~/integrations/integration_settings_form';\nimport PrometheusMetrics from '~/prometheus_metrics/prometheus_metrics';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const prometheusSettingsWrapper = document.querySelector('.js-prometheus-metrics-monitoring');\n  const integrationSettingsForm = new IntegrationSettingsForm('.js-integration-settings-form');\n  integrationSettingsForm.init();\n\n  if (prometheusSettingsWrapper) {\n    const prometheusMetrics = new PrometheusMetrics('.js-prometheus-metrics-monitoring');\n    prometheusMetrics.loadActiveMetrics();\n  }\n});\n"],"sourceRoot":""}