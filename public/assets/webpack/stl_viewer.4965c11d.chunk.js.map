{"version":3,"sources":["webpack:///./blob/3d_viewer/mesh_object.js","webpack:///./blob/3d_viewer/index.js","webpack:///./blob/stl_viewer.js"],"names":["materials","default","three_module","color","wireframe","MeshObject","geo","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","geometry","computeBoundingSphere","rotation","set","Math","PI","boundingSphere","radius","scale","applyMatrix","makeScale","position","x","center","z","y","type","material","STLLoader","three_stl_loader_default","OrbitControls","three_orbit_controls_default","Renderer","container","_3d_viewer_classCallCheck","renderWrapper","render","bind","objects","width","offsetWidth","height","loader","fov","camera","scene","add","setupRenderer","setupGrid","setupLight","controls","renderer","domElement","minDistance","maxDistance","enableKeys","loadFile","antialias","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","pointLight","castShadow","ambientLight","grid","load","dataset","endpoint","obj","mesh_object","push","start","setDefaultCameraPosition","innerHTML","appendChild","parentNode","classList","remove","requestAnimationFrame","forEach","changeMaterial","dist","sin","lookAt","update","__webpack_exports__","viewer","_3d_viewer","document","getElementById","slice","querySelectorAll","el","addEventListener","e","target","preventDefault","querySelector","blur","changeObjectMaterials"],"mappings":"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","file":"stl_viewer.4965c11d.chunk.js","sourcesContent":["import {\n  Matrix4,\n  MeshLambertMaterial,\n  Mesh,\n} from 'three/build/three.module';\n\nconst defaultColor = 0xE24329;\nconst materials = {\n  default: new MeshLambertMaterial({\n    color: defaultColor,\n  }),\n  wireframe: new MeshLambertMaterial({\n    color: defaultColor,\n    wireframe: true,\n  }),\n};\n\nexport default class MeshObject extends Mesh {\n  constructor(geo) {\n    super(\n      geo,\n      materials.default,\n    );\n\n    this.geometry.computeBoundingSphere();\n\n    this.rotation.set(-Math.PI / 2, 0, 0);\n\n    if (this.geometry.boundingSphere.radius > 4) {\n      const scale = 4 / this.geometry.boundingSphere.radius;\n\n      this.geometry.applyMatrix(\n        new Matrix4().makeScale(\n          scale,\n          scale,\n          scale,\n        ),\n      );\n      this.geometry.computeBoundingSphere();\n\n      this.position.x = -this.geometry.boundingSphere.center.x;\n      this.position.z = this.geometry.boundingSphere.center.y;\n    }\n  }\n\n  changeMaterial(type) {\n    this.material = materials[type];\n  }\n}\n","import * as THREE from 'three/build/three.module';\nimport STLLoaderClass from 'three-stl-loader';\nimport OrbitControlsClass from 'three-orbit-controls';\nimport MeshObject from './mesh_object';\n\nconst STLLoader = STLLoaderClass(THREE);\nconst OrbitControls = OrbitControlsClass(THREE);\n\nexport default class Renderer {\n  constructor(container) {\n    this.renderWrapper = this.render.bind(this);\n    this.objects = [];\n\n    this.container = container;\n    this.width = this.container.offsetWidth;\n    this.height = 500;\n\n    this.loader = new STLLoader();\n\n    this.fov = 45;\n    this.camera = new THREE.PerspectiveCamera(\n      this.fov,\n      this.width / this.height,\n      1,\n      1000,\n    );\n\n    this.scene = new THREE.Scene();\n\n    this.scene.add(this.camera);\n\n    // Setup the viewer\n    this.setupRenderer();\n    this.setupGrid();\n    this.setupLight();\n\n    // Setup OrbitControls\n    this.controls = new OrbitControls(\n      this.camera,\n      this.renderer.domElement,\n    );\n    this.controls.minDistance = 5;\n    this.controls.maxDistance = 30;\n    this.controls.enableKeys = false;\n\n    this.loadFile();\n  }\n\n  setupRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n\n    this.renderer.setClearColor(0xFFFFFF);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(\n      this.width,\n      this.height,\n    );\n  }\n\n  setupLight() {\n    // Point light illuminates the object\n    const pointLight = new THREE.PointLight(\n      0xFFFFFF,\n      2,\n      0,\n    );\n\n    pointLight.castShadow = true;\n\n    this.camera.add(pointLight);\n\n    // Ambient light illuminates the scene\n    const ambientLight = new THREE.AmbientLight(\n      0xFFFFFF,\n      1,\n    );\n    this.scene.add(ambientLight);\n  }\n\n  setupGrid() {\n    this.grid = new THREE.GridHelper(\n      20,\n      20,\n      0x000000,\n      0x000000,\n    );\n\n    this.scene.add(this.grid);\n  }\n\n  loadFile() {\n    this.loader.load(this.container.dataset.endpoint, (geo) => {\n      const obj = new MeshObject(geo);\n\n      this.objects.push(obj);\n      this.scene.add(obj);\n\n      this.start();\n      this.setDefaultCameraPosition();\n    });\n  }\n\n  start() {\n    // Empty the container first\n    this.container.innerHTML = '';\n\n    // Add to DOM\n    this.container.appendChild(this.renderer.domElement);\n\n    // Make controls visible\n    this.container.parentNode.classList.remove('is-stl-loading');\n\n    this.render();\n  }\n\n  render() {\n    this.renderer.render(\n      this.scene,\n      this.camera,\n    );\n\n    requestAnimationFrame(this.renderWrapper);\n  }\n\n  changeObjectMaterials(type) {\n    this.objects.forEach((obj) => {\n      obj.changeMaterial(type);\n    });\n  }\n\n  setDefaultCameraPosition() {\n    const obj = this.objects[0];\n    const radius = (obj.geometry.boundingSphere.radius / 1.5);\n    const dist = radius / (Math.sin((this.fov * (Math.PI / 180)) / 2));\n\n    this.camera.position.set(\n      0,\n      dist + 1,\n      dist,\n    );\n\n    this.camera.lookAt(this.grid);\n    this.controls.update();\n  }\n}\n","import Renderer from './3d_viewer';\n\nexport default () => {\n  const viewer = new Renderer(document.getElementById('js-stl-viewer'));\n\n  [].slice.call(document.querySelectorAll('.js-material-changer')).forEach((el) => {\n    el.addEventListener('click', (e) => {\n      const { target } = e;\n\n      e.preventDefault();\n\n      document.querySelector('.js-material-changer.active').classList.remove('active');\n      target.classList.add('active');\n      target.blur();\n\n      viewer.changeObjectMaterials(target.dataset.type);\n    });\n  });\n};\n"],"sourceRoot":""}