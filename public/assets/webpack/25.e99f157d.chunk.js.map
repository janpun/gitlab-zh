{"version":3,"sources":["webpack:////var/cache/omnibus/src/gitlab-rails/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:////var/cache/omnibus/src/gitlab-rails/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:////var/cache/omnibus/src/gitlab-rails/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:////var/cache/omnibus/src/gitlab-rails/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:////var/cache/omnibus/src/gitlab-rails/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"],"names":["Position","Range","Location","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","create","line","character","is","value","candidate","Is","defined","number","one","two","three","four","start","end","Error","uri","range","string","undefined","Warning","Information","Hint","message","severity","code","source","result","title","command","args","_i","arguments","length","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","TextDocumentIdentifier","TextDocumentItem","MarkupKind","CompletionItemKind","InsertTextFormat","CompletionItem","CompletionList","MarkedString","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolInformation","CodeActionContext","CodeLens","FormattingOptions","TextEditChangeImpl","this","prototype","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_this","_textEditChanges","Object","_workspaceEdit","documentChanges","forEach","textDocumentEdit","textEditChange","changes","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","label","items","isIncomplete","fromPlainText","plainText","documentation","parameters","Read","Write","kind","Namespace","Package","String","Number","Boolean","Key","Null","name","containerName","location","diagnostics","typedArray","data","tabSize","insertSpaces","boolean","DocumentLink","target","TextDocument","TextDocumentSaveReason","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","i","ret","a","b","lastModifiedOffset","e","startOffset","endOffset","substring","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","every","createScanner","ignoreTrivia","pos","len","tokenOffset","token","scanError","scanHexDigits","count","exact","digits","charCodeAt","scanNext","isWhiteSpace","fromCharCode","isLineBreak","ch_1","scanString","commentClosed","isDigit","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","format","documentText","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","nChars","computeIndentLevel","indentValue","eol","getEOL","lineBreak","indentLevel","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","s","indexOf","visit","visitor","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onObjectBegin","onObjectProperty","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","onSeparator","onComment","onError","disallowComments","allowTrailingComma","handleError","error","skipUntilAfter","skipUntil","parseString","isValue","parseValue","needsComma","parseArray","parseObject","JSON","parse","parseLiteral","main_createScanner","main_parse","errors","currentProperty","currentParent","previousParents","onValue","object","pop","array","main_format"],"mappings":"wFASA,IAAAA,EAwBAC,EA2BAC,EAuBAC,EAuBAC,EAqCAC,EA8BAC,EAiCAC,kUApMA,SAAAP,GASAA,EAAAQ,OAHA,SAAAC,EAAAC,GACA,OAAgBD,OAAAC,cAUhBV,EAAAW,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAE,OAAAH,EAAAJ,OAAAK,EAAAE,OAAAH,EAAAH,YAfA,CAkBCV,WAMD,SAAAC,GAYAA,EAAAO,OAXA,SAAAS,EAAAC,EAAAC,EAAAC,GACA,GAAAN,EAAAE,OAAAC,IAAAH,EAAAE,OAAAE,IAAAJ,EAAAE,OAAAG,IAAAL,EAAAE,OAAAI,GACA,OAAoBC,MAAArB,EAAAQ,OAAAS,EAAAC,GAAAI,IAAAtB,EAAAQ,OAAAW,EAAAC,IAEpB,GAAApB,EAAAW,GAAAM,IAAAjB,EAAAW,GAAAO,GACA,OAAoBG,MAAAJ,EAAAK,IAAAJ,GAGpB,UAAAK,MAAA,8CAAAN,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,MAWAnB,EAAAU,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAb,EAAAW,GAAAE,EAAAQ,QAAArB,EAAAW,GAAAE,EAAAS,MAlBA,CAqBCrB,WAMD,SAAAC,GASAA,EAAAM,OAHA,SAAAgB,EAAAC,GACA,OAAgBD,MAAAC,UAUhBvB,EAAAS,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAZ,EAAAU,GAAAE,EAAAY,SAAAX,EAAAY,OAAAb,EAAAW,MAAAV,EAAAa,UAAAd,EAAAW,OAfA,CAkBCtB,WAKD,SAAAC,GAIAA,EAAAoB,MAAA,EAIApB,EAAAyB,QAAA,EAIAzB,EAAA0B,YAAA,EAIA1B,EAAA2B,KAAA,EAhBA,CAiBC3B,WAMD,SAAAC,GAiBAA,EAAAI,OAbA,SAAAiB,EAAAM,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAsBV,QAAAM,WAUtB,OATAjB,EAAAC,QAAAiB,KACAG,EAAAH,YAEAlB,EAAAC,QAAAkB,KACAE,EAAAF,QAEAnB,EAAAC,QAAAmB,KACAC,EAAAD,UAEAC,GAeA/B,EAAAO,GATA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IACAZ,EAAAU,GAAAE,EAAAY,QACAX,EAAAY,OAAAb,EAAAkB,WACAjB,EAAAE,OAAAH,EAAAmB,WAAAlB,EAAAa,UAAAd,EAAAmB,aACAlB,EAAAE,OAAAH,EAAAoB,OAAAnB,EAAAY,OAAAb,EAAAoB,OAAAnB,EAAAa,UAAAd,EAAAoB,SACAnB,EAAAY,OAAAb,EAAAqB,SAAApB,EAAAa,UAAAd,EAAAqB,UA5BA,CA+BC9B,WAMD,SAAAC,GAeAA,EAAAG,OAXA,SAAA4B,EAAAC,GAEA,IADA,IAAAC,KACAC,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CD,EAAAC,EAAA,GAAAC,UAAAD,GAEA,IAAAJ,GAAsBC,QAAAC,WAItB,OAHAvB,EAAAC,QAAAuB,MAAAG,OAAA,IACAN,EAAAK,UAAAF,GAEAH,GAUA9B,EAAAM,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAY,OAAAb,EAAAuB,QAAAtB,EAAAY,OAAAb,EAAAuB,QArBA,CAwBC/B,WAMD,SAAAC,GASAA,EAAAoC,QAHA,SAAAjB,EAAAkB,GACA,OAAgBlB,QAAAkB,YAWhBrC,EAAAsC,OAHA,SAAAC,EAAAF,GACA,OAAgBlB,OAASJ,MAAAwB,EAAAvB,IAAAuB,GAAiCF,YAU1DrC,EAAAwC,IAHA,SAAArB,GACA,OAAgBA,QAAAkB,QAAA,KAxBhB,CA2BCrC,WAMD,SAAAC,GAOAA,EAAAC,OAHA,SAAAuC,EAAAC,GACA,OAAgBD,eAAAC,UAShBzC,EAAAI,GANA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IACAoC,EAAAtC,GAAAE,EAAAkC,eACAG,MAAAC,QAAAtC,EAAAmC,QAZA,CAeCzC,WACD,IA4GA6C,EAuBAH,EAwBAI,EA6BAC,EAcAC,EAgCAC,EAsBAC,EAeAC,EAaAC,EAgBAC,EAkBAC,EAwBAC,EAmBAC,EAkBAC,EA6BAC,EA4BAC,EAsBAC,EAyBAC,EA/dAC,EAAA,WACA,SAAAA,EAAArB,GACAsB,KAAAtB,QAoBA,OAlBAqB,EAAAE,UAAA3B,OAAA,SAAAC,EAAAF,GACA2B,KAAAtB,MAAAwB,KAAAlE,EAAAsC,OAAAC,EAAAF,KAEA0B,EAAAE,UAAA7B,QAAA,SAAAjB,EAAAkB,GACA2B,KAAAtB,MAAAwB,KAAAlE,EAAAoC,QAAAjB,EAAAkB,KAEA0B,EAAAE,UAAAE,OAAA,SAAAhD,GACA6C,KAAAtB,MAAAwB,KAAAlE,EAAAwC,IAAArB,KAEA4C,EAAAE,UAAAG,IAAA,SAAAC,GACAL,KAAAtB,MAAAwB,KAAAG,IAEAN,EAAAE,UAAAK,IAAA,WACA,OAAAN,KAAAtB,OAEAqB,EAAAE,UAAAM,MAAA,WACAP,KAAAtB,MAAA8B,OAAA,EAAAR,KAAAtB,MAAAP,SAEA4B,EAtBA,IA2BA,WACA,SAAAU,EAAAC,GACA,IAAAC,EAAAX,KACAA,KAAAY,iBAAAC,OAAA3E,OAAA,MACAwE,IACAV,KAAAc,eAAAJ,EACAA,EAAAK,gBACAL,EAAAK,gBAAAC,QAAA,SAAAC,GACA,IAAAC,EAAA,IAAAnB,EAAAkB,EAAAvC,OACAiC,EAAAC,iBAAAK,EAAAxC,aAAAvB,KAAAgE,IAGAR,EAAAS,SACAN,OAAAO,KAAAV,EAAAS,SAAAH,QAAA,SAAAK,GACA,IAAAH,EAAA,IAAAnB,EAAAW,EAAAS,QAAAE,IACAV,EAAAC,iBAAAS,GAAAH,KAKAL,OAAAS,eAAAb,EAAAR,UAAA,QAKAsB,IAAA,WACA,OAAAvB,KAAAc,gBAEAU,YAAA,EACAC,cAAA,IAEAhB,EAAAR,UAAAyB,kBAAA,SAAAL,GACA,GAAA1C,EAAAtC,GAAAgF,GAAA,CAMA,GALArB,KAAAc,iBACAd,KAAAc,gBACAC,sBAGAf,KAAAc,eAAAC,gBACA,UAAA9D,MAAA,oEAEA,IAAAwB,EAAA4C,EAEA,KADAxD,EAAAmC,KAAAY,iBAAAnC,EAAAvB,MACA,CACA,IACA+D,GACAxC,eACAC,MAHAA,MAKAsB,KAAAc,eAAAC,gBAAAb,KAAAe,GACApD,EAAA,IAAAkC,EAAArB,GACAsB,KAAAY,iBAAAnC,EAAAvB,KAAAW,EAEA,OAAAA,EAQA,GALAmC,KAAAc,iBACAd,KAAAc,gBACAK,QAAAN,OAAA3E,OAAA,SAGA8D,KAAAc,eAAAK,QACA,UAAAlE,MAAA,kEAEA,IAAAY,EACA,KADAA,EAAAmC,KAAAY,iBAAAS,IACA,CACA,IAAA3C,KACAsB,KAAAc,eAAAK,QAAAE,GAAA3C,EACAb,EAAA,IAAAkC,EAAArB,GACAsB,KAAAY,iBAAAS,GAAAxD,EAEA,OAAAA,GAvEA,IAkFA,SAAAiB,GAQAA,EAAA5C,OAHA,SAAAgB,GACA,OAAgBA,QAUhB4B,EAAAzC,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAY,OAAAb,EAAAW,MAdA,CAiBC4B,WAMD,SAAAH,GASAA,EAAAzC,OAHA,SAAAgB,EAAAyE,GACA,OAAgBzE,MAAAyE,YAUhBhD,EAAAtC,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAY,OAAAb,EAAAW,MAAAV,EAAAE,OAAAH,EAAAoF,UAfA,CAkBChD,WAMD,SAAAI,GAWAA,EAAA7C,OAHA,SAAAgB,EAAA0E,EAAAD,EAAAE,GACA,OAAgB3E,MAAA0E,aAAAD,UAAAE,SAUhB9C,EAAA1C,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAY,OAAAb,EAAAW,MAAAV,EAAAY,OAAAb,EAAAqF,aAAApF,EAAAE,OAAAH,EAAAoF,UAAAnF,EAAAY,OAAAb,EAAAsF,OAjBA,CAoBC9C,WASD,SAAAC,GAIAA,EAAA8C,UAAA,YAIA9C,EAAA+C,SAAA,WARA,CASC/C,WAKD,SAAAC,GACAA,EAAA+C,KAAA,EACA/C,EAAAgD,OAAA,EACAhD,EAAAiD,SAAA,EACAjD,EAAAkD,YAAA,EACAlD,EAAAmD,MAAA,EACAnD,EAAAoD,SAAA,EACApD,EAAAqD,MAAA,EACArD,EAAAsD,UAAA,EACAtD,EAAAuD,OAAA,EACAvD,EAAAwD,SAAA,GACAxD,EAAAyD,KAAA,GACAzD,EAAA0D,MAAA,GACA1D,EAAA2D,KAAA,GACA3D,EAAA4D,QAAA,GACA5D,EAAA6D,QAAA,GACA7D,EAAA8D,MAAA,GACA9D,EAAA+D,KAAA,GACA/D,EAAAgE,UAAA,GACAhE,EAAAiE,OAAA,GACAjE,EAAAkE,WAAA,GACAlE,EAAAmE,SAAA,GACAnE,EAAAoE,OAAA,GACApE,EAAAqE,MAAA,GACArE,EAAAsE,SAAA,GACAtE,EAAAuE,cAAA,GAzBA,CA0BCvE,WAMD,SAAAC,GAIAA,EAAA4C,UAAA,EAWA5C,EAAA4D,QAAA,EAfA,CAgBC5D,WAMD,SAAAC,GAQAA,EAAAjD,OAHA,SAAAuH,GACA,OAAgBA,UANhB,CASCtE,WAMD,SAAAC,GAUAA,EAAAlD,OAHA,SAAAwH,EAAAC,GACA,OAAgBD,YAAAC,mBARhB,CAWCvE,WAED,SAAAC,GASAA,EAAAuE,cAHA,SAAAC,GACA,OAAAA,EAAAzF,QAAA,wBAA0C,SAP1C,CAUCiB,WAMD,SAAAC,GAUAA,EAAApD,OAHA,SAAAuH,EAAAK,GACA,OAAAA,GAAgCL,QAAAK,kBAAiDL,UARjF,CAYCnE,WAMD,SAAAC,GAkBAA,EAAArD,OAjBA,SAAAuH,EAAAK,GAEA,IADA,IAAAC,KACA9F,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/C8F,EAAA9F,EAAA,GAAAC,UAAAD,GAEA,IAAAJ,GAAsB4F,SAUtB,OATAjH,EAAAC,QAAAqH,KACAjG,EAAAiG,iBAEAtH,EAAAC,QAAAsH,GACAlG,EAAAkG,aAGAlG,EAAAkG,cAEAlG,GAhBA,CAmBC0B,WAKD,SAAAC,GAIAA,EAAAwC,KAAA,EAIAxC,EAAAwE,KAAA,EAIAxE,EAAAyE,MAAA,EAZA,CAaCzE,WAMD,SAAAC,GAYAA,EAAAvD,OAPA,SAAAiB,EAAA+G,GACA,IAAArG,GAAsBV,SAItB,OAHAX,EAAAE,OAAAwH,KACArG,EAAAqG,QAEArG,GAVA,CAaC4B,WAKD,SAAAC,GACAA,EAAAsD,KAAA,EACAtD,EAAA8C,OAAA,EACA9C,EAAAyE,UAAA,EACAzE,EAAA0E,QAAA,EACA1E,EAAA4C,MAAA,EACA5C,EAAAuC,OAAA,EACAvC,EAAA+C,SAAA,EACA/C,EAAA0C,MAAA,EACA1C,EAAAyC,YAAA,EACAzC,EAAAkD,KAAA,GACAlD,EAAA6C,UAAA,GACA7C,EAAAwC,SAAA,GACAxC,EAAA2C,SAAA,GACA3C,EAAA0D,SAAA,GACA1D,EAAA2E,OAAA,GACA3E,EAAA4E,OAAA,GACA5E,EAAA6E,QAAA,GACA7E,EAAAd,MAAA,GACAc,EAAAmB,OAAA,GACAnB,EAAA8E,IAAA,GACA9E,EAAA+E,KAAA,GACA/E,EAAAyD,WAAA,GACAzD,EAAA2D,OAAA,GACA3D,EAAA4D,MAAA,GACA5D,EAAA6D,SAAA,GACA7D,EAAA8D,cAAA,GA1BA,CA2BC9D,WAED,SAAAC,GAqBAA,EAAAzD,OAXA,SAAAwI,EAAAR,EAAA/G,EAAAD,EAAAyH,GACA,IAAA9G,GACA6G,OACAR,OACAU,UAAuB1H,MAAAC,UAKvB,OAHAwH,IACA9G,EAAA8G,iBAEA9G,GAnBA,CAsBC8B,WAMD,SAAAC,GAOAA,EAAA1D,OAHA,SAAA2I,GACA,OAAgBA,gBAUhBjF,EAAAvD,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAsI,WAAAvI,EAAAsI,YAAA/I,EAAAO,KAbA,CAgBCuD,WAMD,SAAAC,GAUAA,EAAA3D,OANA,SAAAiB,EAAA4H,GACA,IAAAlH,GAAsBV,SAGtB,OAFAX,EAAAC,QAAAsI,KACAlH,EAAAkH,QACAlH,GAUAgC,EAAAxD,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAZ,EAAAU,GAAAE,EAAAY,SAAAX,EAAAa,UAAAd,EAAAwB,UAAAhC,EAAAM,GAAAE,EAAAwB,WAhBA,CAmBC8B,WAMD,SAAAC,GAOAA,EAAA5D,OAHA,SAAA8I,EAAAC,GACA,OAAgBD,UAAAC,iBAUhBnF,EAAAzD,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAC,EAAAE,OAAAH,EAAAyI,UAAAxI,EAAA0I,QAAA3I,EAAA0I,eAbA,CAgBCnF,WAKD,IAAAqF,EAAA,WAGA,OAFA,aADA,IAUA,SAAAA,GAOAA,EAAAjJ,OAHA,SAAAiB,EAAAiI,GACA,OAAgBjI,QAAAiI,WAUhBD,EAAA9I,GAJA,SAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,QAAAF,IAAAZ,EAAAU,GAAAE,EAAAY,SAAAX,EAAAa,UAAAd,EAAA6I,SAAA5I,EAAAY,OAAAb,EAAA6I,UAbA,CAgBCD,WACD,IACAE,EAkFAC,GAjFA,SAAAD,GAUAA,EAAAnJ,OAHA,SAAAgB,EAAA0E,EAAAD,EAAA4D,GACA,WAAAC,EAAAtI,EAAA0E,EAAAD,EAAA4D,IAWAF,EAAAhJ,GALA,SAAAC,GACA,IAAAC,EAAAD,EACA,SAAAE,EAAAC,QAAAF,IAAAC,EAAAY,OAAAb,EAAAW,OAAAV,EAAAa,UAAAd,EAAAqF,aAAApF,EAAAY,OAAAb,EAAAqF,cAAApF,EAAAE,OAAAH,EAAAkJ,YACAjJ,EAAAkJ,KAAAnJ,EAAAoJ,UAAAnJ,EAAAkJ,KAAAnJ,EAAAqJ,aAAApJ,EAAAkJ,KAAAnJ,EAAAsJ,YA2BAR,EAAAS,WAxBA,SAAAC,EAAArH,GAUA,IATA,IAAAmD,EAAAkE,EAAAJ,UACAK,EAuBA,SAAAC,EAAAlB,EAAAmB,GACA,GAAAnB,EAAA5G,QAAA,EAEA,OAAA4G,EAEA,IAAAoB,EAAApB,EAAA5G,OAAA,IACAiI,EAAArB,EAAAsB,MAAA,EAAAF,GACAG,EAAAvB,EAAAsB,MAAAF,GACAF,EAAAG,EAAAF,GACAD,EAAAK,EAAAJ,GAIA,IAHA,IAAAK,EAAA,EACAC,EAAA,EACAC,EAAA,EACAF,EAAAH,EAAAjI,QAAAqI,EAAAF,EAAAnI,QAAA,CACA,IAAAuI,EAAAR,EAAAE,EAAAG,GAAAD,EAAAE,IAGAzB,EAAA0B,KAFAC,GAAA,EAEAN,EAAAG,KAIAD,EAAAE,KAGA,KAAAD,EAAAH,EAAAjI,QACA4G,EAAA0B,KAAAL,EAAAG,KAEA,KAAAC,EAAAF,EAAAnI,QACA4G,EAAA0B,KAAAH,EAAAE,KAEA,OAAAzB,EArDAkB,CAAAvH,EAAA,SAAAiI,EAAAC,GAEA,UADAD,EAAAxJ,MAAAJ,MAAAZ,KAAAyK,EAAAzJ,MAAAJ,MAAAZ,KAEAwK,EAAAxJ,MAAAJ,MAAAX,UAAAwK,EAAAzJ,MAAAJ,MAAAX,UAEA,IAEAyK,EAAAhF,EAAA1D,OACAsI,EAAAT,EAAA7H,OAAA,EAA4CsI,GAAA,EAAQA,IAAA,CACpD,IAAAK,EAAAd,EAAAS,GACAM,EAAAhB,EAAAF,SAAAiB,EAAA3J,MAAAJ,OACAiK,EAAAjB,EAAAF,SAAAiB,EAAA3J,MAAAH,KACA,KAAAgK,GAAAH,GAIA,UAAA5J,MAAA,mBAHA4E,IAAAoF,UAAA,EAAAF,GAAAD,EAAAzI,QAAAwD,EAAAoF,UAAAD,EAAAnF,EAAA1D,QAKA0I,EAAAE,EAEA,OAAAlF,GA1CA,CA6ECwD,WAKD,SAAAC,GAKAA,EAAA4B,OAAA,EAIA5B,EAAA6B,WAAA,EAIA7B,EAAA8B,SAAA,EAbA,CAcC9B,WACD,IA2GA9I,EA3GAgJ,EAAA,WACA,SAAAA,EAAAtI,EAAA0E,EAAAD,EAAA4D,GACAvF,KAAAqH,KAAAnK,EACA8C,KAAAsH,YAAA1F,EACA5B,KAAAuH,SAAA5F,EACA3B,KAAAwH,SAAAjC,EACAvF,KAAAyH,aAAA,KAmGA,OAjGA5G,OAAAS,eAAAkE,EAAAvF,UAAA,OACAsB,IAAA,WACA,OAAAvB,KAAAqH,MAEA7F,YAAA,EACAC,cAAA,IAEAZ,OAAAS,eAAAkE,EAAAvF,UAAA,cACAsB,IAAA,WACA,OAAAvB,KAAAsH,aAEA9F,YAAA,EACAC,cAAA,IAEAZ,OAAAS,eAAAkE,EAAAvF,UAAA,WACAsB,IAAA,WACA,OAAAvB,KAAAuH,UAEA/F,YAAA,EACAC,cAAA,IAEA+D,EAAAvF,UAAA0F,QAAA,SAAAxI,GACA,GAAAA,EAAA,CACA,IAAAJ,EAAAiD,KAAA6F,SAAA1I,EAAAJ,OACAC,EAAAgD,KAAA6F,SAAA1I,EAAAH,KACA,OAAAgD,KAAAwH,SAAAP,UAAAlK,EAAAC,GAEA,OAAAgD,KAAAwH,UAEAhC,EAAAvF,UAAAyH,OAAA,SAAAC,EAAAhG,GACA3B,KAAAwH,SAAAG,EAAA9F,KACA7B,KAAAuH,SAAA5F,EACA3B,KAAAyH,aAAA,MAEAjC,EAAAvF,UAAA2H,eAAA,WACA,UAAA5H,KAAAyH,aAAA,CAIA,IAHA,IAAAI,KACAhG,EAAA7B,KAAAwH,SACAM,GAAA,EACArB,EAAA,EAA2BA,EAAA5E,EAAA1D,OAAiBsI,IAAA,CAC5CqB,IACAD,EAAA3H,KAAAuG,GACAqB,GAAA,GAEA,IAAAC,EAAAlG,EAAAmG,OAAAvB,GACAqB,EAAA,OAAAC,GAAA,OAAAA,EACA,OAAAA,GAAAtB,EAAA,EAAA5E,EAAA1D,QAAA,OAAA0D,EAAAmG,OAAAvB,EAAA,IACAA,IAGAqB,GAAAjG,EAAA1D,OAAA,GACA0J,EAAA3H,KAAA2B,EAAA1D,QAEA6B,KAAAyH,aAAAI,EAEA,OAAA7H,KAAAyH,cAEAjC,EAAAvF,UAAA2F,WAAA,SAAAqC,GACAA,EAAAC,KAAAC,IAAAD,KAAAE,IAAAH,EAAAjI,KAAAwH,SAAArJ,QAAA,GACA,IAAA0J,EAAA7H,KAAA4H,iBACAS,EAAA,EAAAC,EAAAT,EAAA1J,OACA,OAAAmK,EACA,OAAA5M,EAAAQ,OAAA,EAAA+L,GAEA,KAAAI,EAAAC,GAAA,CACA,IAAAC,EAAAL,KAAAM,OAAAH,EAAAC,GAAA,GACAT,EAAAU,GAAAN,EACAK,EAAAC,EAGAF,EAAAE,EAAA,EAKA,IAAApM,EAAAkM,EAAA,EACA,OAAA3M,EAAAQ,OAAAC,EAAA8L,EAAAJ,EAAA1L,KAEAqJ,EAAAvF,UAAA4F,SAAA,SAAAtH,GACA,IAAAsJ,EAAA7H,KAAA4H,iBACA,GAAArJ,EAAApC,MAAA0L,EAAA1J,OACA,OAAA6B,KAAAwH,SAAArJ,OAEA,GAAAI,EAAApC,KAAA,EACA,SAEA,IAAAsM,EAAAZ,EAAAtJ,EAAApC,MACAuM,EAAAnK,EAAApC,KAAA,EAAA0L,EAAA1J,OAAA0J,EAAAtJ,EAAApC,KAAA,GAAA6D,KAAAwH,SAAArJ,OACA,OAAA+J,KAAAC,IAAAD,KAAAE,IAAAK,EAAAlK,EAAAnC,UAAAsM,GAAAD,IAEA5H,OAAAS,eAAAkE,EAAAvF,UAAA,aACAsB,IAAA,WACA,OAAAvB,KAAA4H,iBAAAzJ,QAEAqD,YAAA,EACAC,cAAA,IAEA+D,EAzGA,IA4GA,SAAAhJ,GACA,IAAAmM,EAAA9H,OAAAZ,UAAA0I,SAIAnM,EAAAC,QAHA,SAAAH,GACA,gBAAAA,GAMAE,EAAAa,UAHA,SAAAf,GACA,gBAAAA,GAMAE,EAAA0I,QAHA,SAAA5I,GACA,WAAAA,IAAA,IAAAA,GAMAE,EAAAY,OAHA,SAAAd,GACA,0BAAAqM,EAAAC,KAAAtM,IAMAE,EAAAE,OAHA,SAAAJ,GACA,0BAAAqM,EAAAC,KAAAtM,IAMAE,EAAAkJ,KAHA,SAAApJ,GACA,4BAAAqM,EAAAC,KAAAtM,IAMAE,EAAAsI,WAHA,SAAAxI,EAAAuM,GACA,OAAAjK,MAAAC,QAAAvC,MAAAwM,MAAAD,IA3BA,CA8BCrM,8CCn9BD,SAAAuM,EAAAlH,EAAAmH,QACA,IAAAA,IAAkCA,GAAA,GAClC,IAAAC,EAAA,EAAAC,EAAArH,EAAA1D,OAAA7B,EAAA,GAAA6M,EAAA,EAAAC,EAAA,GAAAC,EAAA,EACA,SAAAC,EAAAC,EAAAC,GAGA,IAFA,IAAAC,EAAA,EACAnN,EAAA,EACAmN,EAAAF,IAAAC,GAAA,CACA,IAAAzB,EAAAlG,EAAA6H,WAAAT,GACA,GAAAlB,GAAA,IAAAA,GAAA,GACAzL,EAAA,GAAAA,EAAAyL,EAAA,QAEA,GAAAA,GAAA,IAAAA,GAAA,GACAzL,EAAA,GAAAA,EAAAyL,EAAA,UAEA,MAAAA,GAAA,IAAAA,GAAA,KAIA,MAHAzL,EAAA,GAAAA,EAAAyL,EAAA,MAKAkB,IACAQ,IAKA,OAHAA,EAAAF,IACAjN,GAAA,GAEAA,EAiIA,SAAAqN,IAIA,GAHArN,EAAA,GACA+M,EAAA,EACAF,EAAAF,EACAA,GAAAC,EAGA,OADAC,EAAAD,EACAE,EAAA,GAEA,IAAAzL,EAAAkE,EAAA6H,WAAAT,GAEA,GAAAW,EAAAjM,GAAA,CACA,GACAsL,IACA3M,GAAA+H,OAAAwF,aAAAlM,GACAA,EAAAkE,EAAA6H,WAAAT,SACaW,EAAAjM,IACb,OAAAyL,EAAA,GAGA,GAAAU,EAAAnM,GAOA,OANAsL,IACA3M,GAAA+H,OAAAwF,aAAAlM,GACA,KAAAA,GAAA,KAAAkE,EAAA6H,WAAAT,KACAA,IACA3M,GAAA,MAEA8M,EAAA,GAEA,OAAAzL,GAEA,SAEA,OADAsL,IACAG,EAAA,EACA,SAEA,OADAH,IACAG,EAAA,EACA,QAEA,OADAH,IACAG,EAAA,EACA,QAEA,OADAH,IACAG,EAAA,EACA,QAEA,OADAH,IACAG,EAAA,EACA,QAEA,OADAH,IACAG,EAAA,EAEA,QAGA,OAFAH,IACA3M,EAjIA,WAEA,IADA,IAAAuB,EAAA,GAAAd,EAAAkM,IACA,CACA,GAAAA,GAAAC,EAAA,CACArL,GAAAgE,EAAAoF,UAAAlK,EAAAkM,GACAI,EAAA,EACA,MAEA,IAAAtB,EAAAlG,EAAA6H,WAAAT,GACA,QAAAlB,EAAA,CACAlK,GAAAgE,EAAAoF,UAAAlK,EAAAkM,GACAA,IACA,MAEA,QAAAlB,EAAA,CAgDA,GAAAA,GAAA,GAAAA,GAAA,IACA,GAAA+B,EAAA/B,GAAA,CACAlK,GAAAgE,EAAAoF,UAAAlK,EAAAkM,GACAI,EAAA,EACA,MAGAA,EAAA,EAIAJ,QA3DA,CAGA,GAFApL,GAAAgE,EAAAoF,UAAAlK,EAAAkM,KACAA,GACAC,EAAA,CACAG,EAAA,EACA,MAGA,OADAtB,EAAAlG,EAAA6H,WAAAT,MAEA,QACApL,GAAA,IACA,MACA,QACAA,GAAA,KACA,MACA,QACAA,GAAA,IACA,MACA,QACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACA,IAAAkM,EAAAT,EAAA,MACAS,GAAA,EACAlM,GAAAwG,OAAAwF,aAAAE,GAGAV,EAAA,EAEA,MACA,QACAA,EAAA,EAEAtM,EAAAkM,GAgBA,OAAApL,EAsDAmM,GACAZ,EAAA,GAEA,QACA,IAAArM,EAAAkM,EAAA,EAEA,QAAApH,EAAA6H,WAAAT,EAAA,IAEA,IADAA,GAAA,EACAA,EAAAC,IACAY,EAAAjI,EAAA6H,WAAAT,KAGAA,IAGA,OADA3M,EAAAuF,EAAAoF,UAAAlK,EAAAkM,GACAG,EAAA,GAGA,QAAAvH,EAAA6H,WAAAT,EAAA,IACAA,GAAA,EAEA,IADA,IAAAgB,GAAA,EACAhB,EAAAC,GAAA,CAEA,QADArH,EAAA6H,WAAAT,IACAA,EAAA,EAAAC,GAAA,KAAArH,EAAA6H,WAAAT,EAAA,IACAA,GAAA,EACAgB,GAAA,EACA,MAEAhB,IAOA,OALAgB,IACAhB,IACAI,EAAA,GAEA/M,EAAAuF,EAAAoF,UAAAlK,EAAAkM,GACAG,EAAA,GAKA,OAFA9M,GAAA+H,OAAAwF,aAAAlM,GACAsL,IACAG,EAAA,GAEA,QAGA,GAFA9M,GAAA+H,OAAAwF,aAAAlM,KACAsL,IACAC,IAAAgB,EAAArI,EAAA6H,WAAAT,IACA,OAAAG,EAAA,GAKA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QAEA,OADA9M,GAzOA,WACA,IAAAS,EAAAkM,EACA,QAAApH,EAAA6H,WAAAT,GACAA,SAIA,IADAA,IACAA,EAAApH,EAAA1D,QAAA+L,EAAArI,EAAA6H,WAAAT,KACAA,IAGA,GAAAA,EAAApH,EAAA1D,QAAA,KAAA0D,EAAA6H,WAAAT,GAAA,CAEA,OADAA,EACApH,EAAA1D,QAAA+L,EAAArI,EAAA6H,WAAAT,KAQA,OADAI,EAAA,EACAxH,EAAAoF,UAAAlK,EAAAkM,GANA,IADAA,IACAA,EAAApH,EAAA1D,QAAA+L,EAAArI,EAAA6H,WAAAT,KACAA,IAQA,IAAAjM,EAAAiM,EACA,GAAAA,EAAApH,EAAA1D,SAAA,KAAA0D,EAAA6H,WAAAT,IAAA,MAAApH,EAAA6H,WAAAT,IAKA,MAJAA,EACApH,EAAA1D,QAAA,KAAA0D,EAAA6H,WAAAT,IAAA,KAAApH,EAAA6H,WAAAT,KACAA,IAEAA,EAAApH,EAAA1D,QAAA+L,EAAArI,EAAA6H,WAAAT,IAAA,CAEA,IADAA,IACAA,EAAApH,EAAA1D,QAAA+L,EAAArI,EAAA6H,WAAAT,KACAA,IAEAjM,EAAAiM,OAGAI,EAAA,EAGA,OAAAxH,EAAAoF,UAAAlK,EAAAC,GAgMAmN,GACAf,EAAA,GAEA,QAEA,KAAAH,EAAAC,GAAAkB,EAAAzM,IACAsL,IACAtL,EAAAkE,EAAA6H,WAAAT,GAEA,GAAAE,IAAAF,EAAA,CAGA,OAFA3M,EAAAuF,EAAAoF,UAAAkC,EAAAF,IAGA,kBAAAG,EAAA,EACA,mBAAAA,EAAA,EACA,kBAAAA,EAAA,EAEA,OAAAA,EAAA,GAKA,OAFA9M,GAAA+H,OAAAwF,aAAAlM,GACAsL,IACAG,EAAA,IAGA,SAAAgB,EAAAzM,GACA,GAAAiM,EAAAjM,IAAAmM,EAAAnM,GACA,SAEA,OAAAA,GACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,SAEA,SASA,OACA0M,YAjSA,SAAAC,GACArB,EAAAqB,EACAhO,EAAA,GACA6M,EAAA,EACAC,EAAA,GACAC,EAAA,GA6RAkB,YAAA,WAAkC,OAAAtB,GAClCuB,KAAAxB,EAVA,WACA,IAAAnL,EACA,GACAA,EAAA8L,UACS9L,GAAA,IAAAA,GAAA,IACT,OAAAA,GAKA8L,EACAc,SAAA,WAA+B,OAAArB,GAC/BsB,cAAA,WAAoC,OAAApO,GACpCqO,eAAA,WAAqC,OAAAxB,GACrCyB,eAAA,WAAqC,OAAA3B,EAAAE,GACrC0B,cAAA,WAAoC,OAAAxB,IAGpC,SAAAO,EAAA7B,GACA,YAAAA,GAAA,IAAAA,GAAA,KAAAA,GAAA,KAAAA,GACA,MAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MACA,OAAAA,GAAA,OAAAA,GAAA,QAAAA,GAAA,QAAAA,EAEA,SAAA+B,EAAA/B,GACA,YAAAA,GAAA,KAAAA,GAAA,OAAAA,GAAA,OAAAA,EAEA,SAAAmC,EAAAnC,GACA,OAAAA,GAAA,IAAAA,GAAA,GCnVA,SAAA+C,EAAAC,EAAA5N,EAAA6N,GACA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACA,GAAAlO,EAAA,CAIA,IAHAiO,EAAAjO,EAAA8K,OACAoD,EAAAD,EAAAjO,EAAAgB,OACAgN,EAAAC,EACAD,EAAA,IAAAG,EAAAP,EAAAI,EAAA,IACAA,IAGA,IADA,IAAAnE,EAAAqE,EACArE,EAAA+D,EAAA5M,SAAAmN,EAAAP,EAAA/D,IACAA,IAEAkE,EAAAH,EAAA9D,UAAAkE,EAAAnE,GACAiE,EAqIA,SAAA1F,EAAA0C,EAAA+C,GACA,IAAAvE,EAAA,EACA8E,EAAA,EACAvG,EAAAgG,EAAAhG,SAAA,EACA,KAAAyB,EAAAlB,EAAApH,QAAA,CACA,IAAA4J,EAAAxC,EAAAyC,OAAAvB,GACA,SAAAsB,EACAwD,QAEA,WAAAxD,EAIA,MAHAwD,GAAAvG,EAKAyB,IAEA,OAAAyB,KAAAM,MAAA+C,EAAAvG,GAtJAwG,CAAAN,EAAA,EAAAF,QAGAE,EAAAH,EACAE,EAAA,EACAE,EAAA,EACAC,EAAA,EACAC,EAAAN,EAAA5M,OAEA,IAGAsN,EAHAC,EA+IA,SAAAV,EAAAnJ,GACA,QAAA4E,EAAA,EAAmBA,EAAA5E,EAAA1D,OAAiBsI,IAAA,CACpC,IAAAsB,EAAAlG,EAAAmG,OAAAvB,GACA,UAAAsB,EACA,OAAAtB,EAAA,EAAA5E,EAAA1D,QAAA,OAAA0D,EAAAmG,OAAAvB,EAAA,GACA,OAEA,KAEA,UAAAsB,EACA,WAGA,OAAAiD,KAAAU,KAAA,KA5JAC,CAAAX,EAAAD,GACAa,GAAA,EACAC,EAAA,EAGAJ,EADAT,EAAA/F,aACA6G,EAAA,IAAAd,EAAAhG,SAAA,GAGA,KAEA,IAAA+G,EAAAhD,EAAAmC,GAAA,GACAc,GAAA,EACA,SAAAC,IACA,OAAAP,EAAAI,EAAAL,EAAAR,EAAAY,GAEA,SAAAlC,IACA,IAAAP,EAAA2C,EAAAvB,OAEA,IADAoB,GAAA,EACA,KAAAxC,GAAA,KAAAA,GACAwC,KAAA,KAAAxC,EACAA,EAAA2C,EAAAvB,OAGA,OADAwB,EAAA,KAAA5C,GAAA,IAAA2C,EAAAlB,gBACAzB,EAEA,IAAA8C,KACA,SAAAC,EAAAtK,EAAAkF,EAAAC,IACAgF,GAAAjF,EAAAsE,GAAArE,EAAAoE,GAAAL,EAAA9D,UAAAF,EAAAC,KAAAnF,GACAqK,EAAAhM,MAAiC+H,OAAAlB,EAAA5I,OAAA6I,EAAAD,EAAAxB,QAAA1D,IAGjC,IAAAuK,EAAAzC,IACA,QAAAyC,EAAA,CACA,IAAAC,EAAAN,EAAApB,iBAAAQ,EAEAgB,EADAL,EAAAL,EAAAR,GACAE,EAAAkB,GAEA,UAAAD,GAAA,CAIA,IAHA,IAAAE,EAAAP,EAAApB,iBAAAoB,EAAAnB,iBAAAO,EACAoB,EAAA5C,IACA6C,EAAA,IACAZ,IAAA,KAAAW,GAAA,KAAAA,IAAA,CAGAJ,EAAA,IAAAG,EADAP,EAAApB,iBAAAQ,GAEAmB,EAAAP,EAAApB,iBAAAoB,EAAAnB,iBAAAO,EACAqB,EAAA,KAAAD,EAAAN,IAAA,GACAM,EAAA5C,IAEA,OAAA4C,EACA,IAAAH,IACAP,IACAW,EAAAP,UAGA,OAAAM,EACA,IAAAH,IACAP,IACAW,EAAAP,SAGA,CACA,OAAAG,GACA,OACA,OACAP,IACAW,EAAAP,IACA,MACA,OACA,QACAO,EAAAP,IACA,MACA,QAEAO,EADAZ,EACAK,IAIA,IAEA,MACA,OACAO,EAAA,IACA,MACA,QACA,OAAAD,EAAA,CACAC,EAAA,GACA,MAGA,OACA,OACA,OACA,QACA,OACA,OACA,KAAAD,GAAA,KAAAA,EACAC,EAAA,IAEA,IAAAD,GAAA,KAAAA,IACAP,GAAA,GAEA,MACA,QACAA,GAAA,GAGAJ,GAAA,KAAAW,GAAA,KAAAA,IACAC,EAAAP,KAIAE,EAAAK,EAAAF,EADAP,EAAApB,iBAAAQ,GAEAiB,EAAAG,EAEA,OAAAL,EAEA,SAAAJ,EAAAW,EAAAlD,GAEA,IADA,IAAA1L,EAAA,GACA4I,EAAA,EAAmBA,EAAA8C,EAAW9C,IAC9B5I,GAAA4O,EAEA,OAAA5O,EAoCA,SAAAyN,EAAAzJ,EAAAoG,GACA,kBAAAyE,QAAA7K,EAAAmG,OAAAC,ICoGA,SAAA0E,EAAA9K,EAAA+K,EAAA5B,GACA,IAAA6B,EAAA9D,EAAAlH,GAAA,GACA,SAAAiL,EAAAC,GACA,OAAAA,EAAA,WAA4C,OAAAA,EAAAF,EAAAlC,iBAAAkC,EAAAjC,mBAA8E,WAAgB,UAE1I,SAAAoC,EAAAD,GACA,OAAAA,EAAA,SAAAE,GAA+C,OAAAF,EAAAE,EAAAJ,EAAAlC,iBAAAkC,EAAAjC,mBAAmF,WAAgB,UAElJ,IAAAsC,EAAAJ,EAAAF,EAAAM,eAAAC,EAAAH,EAAAJ,EAAAO,kBAAAC,EAAAN,EAAAF,EAAAQ,aAAAC,EAAAP,EAAAF,EAAAS,cAAAC,EAAAR,EAAAF,EAAAU,YAAAC,EAAAP,EAAAJ,EAAAW,gBAAAC,EAAAR,EAAAJ,EAAAY,aAAAC,EAAAX,EAAAF,EAAAa,WAAAC,EAAAV,EAAAJ,EAAAc,SACAC,EAAA3C,KAAA2C,iBACAC,EAAA5C,KAAA4C,mBACA,SAAAjE,IACA,QACA,IAAAP,EAAAyD,EAAArC,OACA,OAAAqC,EAAAhC,iBACA,OACAgD,EAAA,IACA,MACA,OACAA,EAAA,IACA,MACA,OACAA,EAAA,IACA,MACA,OACAF,GACAE,EAAA,IAEA,MACA,OACAA,EAAA,IACA,MACA,OACAA,EAAA,IAGA,OAAAzE,GACA,QACA,QACAuE,EACAE,EAAA,IAGAJ,IAEA,MACA,QACAI,EAAA,GACA,MACA,QACA,QACA,MACA,QACA,OAAAzE,IAIA,SAAAyE,EAAAC,EAAAC,EAAAC,GAIA,QAHA,IAAAD,IAAwCA,WACxC,IAAAC,IAAmCA,MACnCN,EAAAI,GACAC,EAAA5P,OAAA6P,EAAA7P,OAAA,EAEA,IADA,IAAAiL,EAAAyD,EAAApC,WACA,KAAArB,GAAA,CACA,QAAA2E,EAAArB,QAAAtD,GAAA,CACAO,IACA,MAEA,QAAAqE,EAAAtB,QAAAtD,GACA,MAEAA,EAAAO,KAIA,SAAAsE,EAAAC,GACA,IAAA5R,EAAAuQ,EAAAnC,gBAQA,OAPAwD,EACAX,EAAAjR,GAGA6Q,EAAA7Q,GAEAqN,KACA,EAmHA,SAAAwE,IACA,OAAAtB,EAAApC,YACA,OACA,OAnCA,WACA4C,IACA1D,IAEA,IADA,IAAAyE,GAAA,EACA,IAAAvB,EAAApC,YAAA,KAAAoC,EAAApC,YAAA,CACA,OAAAoC,EAAApC,YAMA,GALA2D,GACAP,EAAA,SAEAL,EAAA,KACA7D,IACA,IAAAkD,EAAApC,YAAAmD,EACA,WAGAQ,GACAP,EAAA,SAEAM,KACAN,EAAA,YAEAO,GAAA,EASA,OAPAd,IACA,IAAAT,EAAApC,WACAoD,EAAA,UAGAlE,KAEA,EAKA0E,GACA,OACA,OArEA,WACAnB,IACAvD,IAEA,IADA,IAAAyE,GAAA,EACA,IAAAvB,EAAApC,YAAA,KAAAoC,EAAApC,YAAA,CACA,OAAAoC,EAAApC,YAMA,GALA2D,GACAP,EAAA,SAEAL,EAAA,KACA7D,IACA,IAAAkD,EAAApC,YAAAmD,EACA,WAGAQ,GACAP,EAAA,UAjCA,KAAAhB,EAAApC,YACAoD,EAAA,YACA,IAEAI,GAAA,GACA,IAAApB,EAAApC,YACA+C,EAAA,KACA7D,IACAwE,KACAN,EAAA,aAIAA,EAAA,YAEA,KAqBAA,EAAA,YAEAO,GAAA,EASA,OAPAhB,IACA,IAAAP,EAAApC,WACAoD,EAAA,UAGAlE,KAEA,EAuCA2E,GACA,QACA,OAAAL,GAAA,GACA,QACA,OA1HA,WACA,OAAApB,EAAApC,YACA,QACA,IAAAnO,EAAA,EACA,IAEA,iBADAA,EAAAiS,KAAAC,MAAA3B,EAAAnC,oBAEAmD,EAAA,GACAvR,EAAA,GAGA,MAAAwK,GACA+G,EAAA,GAEAN,EAAAjR,GACA,MACA,OACAiR,EAAA,MACA,MACA,OACAA,GAAA,GACA,MACA,OACAA,GAAA,GACA,MACA,QACA,SAGA,OADA5D,KACA,EA6FA8E,IAIA,OADA9E,IACA,KAAAkD,EAAApC,aAGA0D,KAIA,KAAAtB,EAAApC,YACAoD,EAAA,UAEA,IANAA,EAAA,UACA,oGChfA,IAAAa,EAAA3F,EASA4F,ED0GA,SAAA9M,EAAA+M,EAAA5D,QACA,IAAA4D,IAA4BA,MAC5B,IAAAC,EAAA,KACAC,KACAC,KACA,SAAAC,EAAA1S,GACAsC,MAAAC,QAAAiQ,GACAA,EAAA5O,KAAA5D,GAEAuS,IACAC,EAAAD,GAAAvS,GAiCA,OADAqQ,EAAA9K,GA5BAqL,cAAA,WACA,IAAA+B,KACAD,EAAAC,GACAF,EAAA7O,KAAA4O,GACAA,EAAAG,EACAJ,EAAA,MAEA1B,iBAAA,SAAAzI,GACAmK,EAAAnK,GAEA0I,YAAA,WACA0B,EAAAC,EAAAG,OAEA7B,aAAA,WACA,IAAA8B,KACAH,EAAAG,GACAJ,EAAA7O,KAAA4O,GACAA,EAAAK,EACAN,EAAA,MAEAvB,WAAA,WACAwB,EAAAC,EAAAG,OAEA3B,eAAAyB,EACAtB,QAAA,SAAAI,EAAA7F,EAAA9J,GACAyQ,EAAA1O,MAAyB4N,QAAA7F,SAAA9J,aAGzB6M,GACA8D,EAAA,IClHA,SAAAM,EAAArE,EAAA5N,EAAA6N,GACA,OAAAF,EAAAC,EAAA5N,EAAA6N","file":"25.e99f157d.chunk.js","sourcesContent":["/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map"],"sourceRoot":""}