{"version":3,"sources":["webpack:///./toggle_buttons.js","webpack:///./clusters/services/clusters_service.js","webpack:///./pages/projects/clusters/index/index.js","webpack:///./clusters/clusters_index.js"],"names":["updateToggle","toggle","isOn","classList","setupToggleButtons","container","clickCallback","arguments","length","undefined","querySelectorAll","forEach","input","querySelector","Object","_lib_utils_common_utils__WEBPACK_IMPORTED_MODULE_3__","value","addEventListener","previousIsOn","setAttribute","Promise","resolve","then","catch","removeAttribute","jquery__WEBPACK_IMPORTED_MODULE_0___default","trigger","_flash__WEBPACK_IMPORTED_MODULE_1__","_locale__WEBPACK_IMPORTED_MODULE_2__","bind","ClusterService","options","_classCallCheck","this","appInstallEndpointMap","helm","installHelmEndpoint","ingress","installIngressEndpoint","runner","installRunnerEndpoint","prometheus","installPrometheusEndpoint","jupyter","installJupyterEndpoint","_lib_utils_axios_utils__WEBPACK_IMPORTED_MODULE_0__","get","endpoint","appId","params","post","data","put","document","clusterList","gcp_signup_offer","toggle_buttons","clusters_service","updateCluster","dataset","cluster","enabled","err","flash","locale"],"mappings":"qNAeA,SAASA,EAAaC,EAAQC,GAC5BD,EAAOE,UAAUF,OAAO,aAAcC,GAgCzB,SAASE,EAAmBC,GAAqC,IAA1BC,EAA0BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,aACpDF,EAAUK,iBAAiB,8BAEnCC,QAAQ,SAACV,GACf,IAAMW,EAAQX,EAAOY,cAAc,oCAInCb,EAAaC,EAHAa,OAAAC,EAAA,EAAAD,CAA2BF,EAAMI,QAK9Cf,EAAOgB,iBAAiB,QAvC5B,SAAyBhB,EAAQW,EAAON,GACtC,IAAMY,EAAeJ,OAAAC,EAAA,EAAAD,CAA2BF,EAAMI,OAGtDhB,EAAaC,GAASiB,GACtBjB,EAAOkB,aAAa,YAAY,GAChClB,EAAOE,UAAUF,OAAO,cAAc,GAEtCmB,QAAQC,QAAQf,GAAeY,EAAcjB,IAC1CqB,KAAK,WAEJV,EAAMO,aAAa,SAAUD,KAE9BK,MAAM,WAELvB,EAAaC,EAAQiB,KAEtBI,KAAK,WAEJrB,EAAOuB,gBAAgB,YACvBvB,EAAOE,UAAUF,OAAO,cAAc,GAEtCwB,IAAEb,GAAOc,QAAQ,oBAElBH,MAAM,WACLT,OAAAa,EAAA,EAAAb,CAAMA,OAAAc,EAAA,EAAAd,CAAG,qDAcsCe,KAAK,KAAM5B,EAAQW,EAAON,6SCxD1DwB,aACnB,SAAAA,IAA0B,IAAdC,EAAcxB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,mGAAAyB,CAAAC,KAAAH,GACxBG,KAAKF,QAAUA,EACfE,KAAKC,uBACHC,KAAMF,KAAKF,QAAQK,oBACnBC,QAASJ,KAAKF,QAAQO,uBACtBC,OAAQN,KAAKF,QAAQS,sBACrBC,WAAYR,KAAKF,QAAQW,0BACzBC,QAASV,KAAKF,QAAQa,sEAKxB,OAAOC,EAAA,EAAMC,IAAIb,KAAKF,QAAQgB,qDAGbC,EAAOC,GACxB,OAAOJ,EAAA,EAAMK,KAAKjB,KAAKC,sBAAsBc,GAAQC,2CAGlCF,EAAUI,GAC7B,OAAON,EAAA,EAAMO,IAAIL,EAAUI,wGCrB/BE,SAASpC,iBAAiB,mBAAoB,WAC5C,ICIF,WACE,IAAMqC,EAAcD,SAASxC,cAAc,qBAE3CC,OAAAyC,EAAA,EAAAzC,GAGIwC,GACFxC,OAAA0C,EAAA,EAAA1C,CAAmBuC,SAASxC,cAAc,qBAAsB,SAACG,EAAOf,GAAR,OAC9DwD,EAAA,EAAgBC,cAAczD,EAAO0D,QAAQZ,UAAYa,SAAWC,QAAS7C,KAAWO,MACtF,SAAAuC,GAEE,MADAhD,OAAAiD,EAAA,EAAAjD,CAAYA,OAAAkD,EAAA,EAAAlD,CAAG,qCACTgD","file":"pages.projects.clusters.index.2f0a4acc.chunk.js","sourcesContent":["import $ from 'jquery';\nimport Flash from './flash';\nimport { __ } from './locale';\nimport { convertPermissionToBoolean } from './lib/utils/common_utils';\n\n/*\n example HAML:\n ```\n  %button.js-project-feature-toggle.project-feature-toggle{ type: \"button\",\n    class: \"#{'is-checked' if enabled?}\",\n    'aria-label': _('Toggle Kubernetes Cluster') }\n    %input{ type: \"hidden\", class: 'js-project-feature-toggle-input', value: enabled? }\n  ```\n*/\n\nfunction updateToggle(toggle, isOn) {\n  toggle.classList.toggle('is-checked', isOn);\n}\n\nfunction onToggleClicked(toggle, input, clickCallback) {\n  const previousIsOn = convertPermissionToBoolean(input.value);\n\n  // Visually change the toggle and start loading\n  updateToggle(toggle, !previousIsOn);\n  toggle.setAttribute('disabled', true);\n  toggle.classList.toggle('is-loading', true);\n\n  Promise.resolve(clickCallback(!previousIsOn, toggle))\n    .then(() => {\n      // Actually change the input value\n      input.setAttribute('value', !previousIsOn);\n    })\n    .catch(() => {\n      // Revert the visuals if something goes wrong\n      updateToggle(toggle, previousIsOn);\n    })\n    .then(() => {\n      // Remove the loading indicator in any case\n      toggle.removeAttribute('disabled');\n      toggle.classList.toggle('is-loading', false);\n\n      $(input).trigger('trigger-change');\n    })\n    .catch(() => {\n      Flash(__('Something went wrong when toggling the button'));\n    });\n}\n\nexport default function setupToggleButtons(container, clickCallback = () => {}) {\n  const toggles = container.querySelectorAll('.js-project-feature-toggle');\n\n  toggles.forEach((toggle) => {\n    const input = toggle.querySelector('.js-project-feature-toggle-input');\n    const isOn = convertPermissionToBoolean(input.value);\n\n    // Get the visible toggle in sync with the hidden input\n    updateToggle(toggle, isOn);\n\n    toggle.addEventListener('click', onToggleClicked.bind(null, toggle, input, clickCallback));\n  });\n}\n","import axios from '../../lib/utils/axios_utils';\n\nexport default class ClusterService {\n  constructor(options = {}) {\n    this.options = options;\n    this.appInstallEndpointMap = {\n      helm: this.options.installHelmEndpoint,\n      ingress: this.options.installIngressEndpoint,\n      runner: this.options.installRunnerEndpoint,\n      prometheus: this.options.installPrometheusEndpoint,\n      jupyter: this.options.installJupyterEndpoint,\n    };\n  }\n\n  fetchData() {\n    return axios.get(this.options.endpoint);\n  }\n\n  installApplication(appId, params) {\n    return axios.post(this.appInstallEndpointMap[appId], params);\n  }\n\n  static updateCluster(endpoint, data) {\n    return axios.put(endpoint, data);\n  }\n}\n","import ClustersIndex from '~/clusters/clusters_index';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new ClustersIndex(); // eslint-disable-line no-new\n});\n","import createFlash from '~/flash';\nimport { __ } from '~/locale';\nimport setupToggleButtons from '~/toggle_buttons';\nimport gcpSignupOffer from '~/clusters/components/gcp_signup_offer';\n\nimport ClustersService from './services/clusters_service';\n\nexport default () => {\n  const clusterList = document.querySelector('.js-clusters-list');\n\n  gcpSignupOffer();\n\n  // The empty state won't have a clusterList\n  if (clusterList) {\n    setupToggleButtons(document.querySelector('.js-clusters-list'), (value, toggle) =>\n      ClustersService.updateCluster(toggle.dataset.endpoint, { cluster: { enabled: value } }).catch(\n        err => {\n          createFlash(__('Something went wrong on our end.'));\n          throw err;\n        },\n      ),\n    );\n  }\n};\n"],"sourceRoot":""}