{"version":3,"sources":["webpack:///./project_visibility.js","webpack:///./projects/project_new.js","webpack:///./pages/projects/new/index.js"],"names":["setVisibilityOptions","namespaceSelector","_selectedNamespace$da","options","selectedIndex","dataset","name","visibility","visibilityLevel","showPath","editPath","document","querySelectorAll","forEach","option","optionInput","querySelector","optionValue","value","optionTitle","optionName","innerText","toLowerCase","classList","contains","add","disabled","reason","innerHTML","remove","hasUserDefinedProjectPath","deriveProjectPathFromUrl","$projectImportUrl","$currentProjectPath","parents","find","importUrl","val","trim","length","replace","pathMatch","exec","project_new","$newProjectForm","jquery_default","$projectPath","$useTemplateBtn","$projectFieldsForm","$selectedTemplateText","$changeTemplateBtn","$selectedIcon","$templateProjectNameInput","$pushNewProjectTipTrigger","$projectTemplateButtons","on","e","preventDefault","currentTarget","next","show","hide","importHref","attr","removeAttr","popover","title","data","placement","html","content","event","target","closest","trigger","$","Object","common_utils","focus","off","addClass","empty","selectedTemplate","rails","text","icon","express","spring","this","clone","appendTo","removeClass","prop","keyup","addEventListener"],"mappings":"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","file":"pages.projects.new.1e0b3b26.chunk.js","sourcesContent":["import $ from 'jquery';\n\nfunction setVisibilityOptions(namespaceSelector) {\n  if (!namespaceSelector || !('selectedIndex' in namespaceSelector)) {\n    return;\n  }\n  const selectedNamespace = namespaceSelector.options[namespaceSelector.selectedIndex];\n  const { name, visibility, visibilityLevel, showPath, editPath } = selectedNamespace.dataset;\n\n  document.querySelectorAll('.visibility-level-setting .form-check').forEach((option) => {\n    const optionInput = option.querySelector('input[type=radio]');\n    const optionValue = optionInput ? optionInput.value : 0;\n    const optionTitle = option.querySelector('.option-title');\n    const optionName = optionTitle ? optionTitle.innerText.toLowerCase() : '';\n\n    // don't change anything if the option is restricted by admin\n    if (!option.classList.contains('restricted')) {\n      if (visibilityLevel < optionValue) {\n        option.classList.add('disabled');\n        optionInput.disabled = true;\n        const reason = option.querySelector('.option-disabled-reason');\n        if (reason) {\n          reason.innerHTML =\n            `This project cannot be ${optionName} because the visibility of\n            <a href=\"${showPath}\">${name}</a> is ${visibility}. To make this project\n            ${optionName}, you must first <a href=\"${editPath}\">change the visibility</a>\n            of the parent group.`;\n        }\n      } else {\n        option.classList.remove('disabled');\n        optionInput.disabled = false;\n      }\n    }\n  });\n}\n\nexport default function initProjectVisibilitySelector() {\n  const namespaceSelector = document.querySelector('select.js-select-namespace');\n  if (namespaceSelector) {\n    $('.select2.js-select-namespace').on('change', () => setVisibilityOptions(namespaceSelector));\n    setVisibilityOptions(namespaceSelector);\n  }\n}\n","import $ from 'jquery';\nimport { addSelectOnFocusBehaviour } from '../lib/utils/common_utils';\n\nlet hasUserDefinedProjectPath = false;\n\nconst deriveProjectPathFromUrl = ($projectImportUrl) => {\n  const $currentProjectPath = $projectImportUrl.parents('.toggle-import-form').find('#project_path');\n  if (hasUserDefinedProjectPath) {\n    return;\n  }\n\n  let importUrl = $projectImportUrl.val().trim();\n  if (importUrl.length === 0) {\n    return;\n  }\n\n  /*\n    \\/?: remove trailing slash\n    (\\.git\\/?)?: remove trailing .git (with optional trailing slash)\n    (\\?.*)?: remove query string\n    (#.*)?: remove fragment identifier\n  */\n  importUrl = importUrl.replace(/\\/?(\\.git\\/?)?(\\?.*)?(#.*)?$/, '');\n\n  // extract everything after the last slash\n  const pathMatch = /\\/([^/]+)$/.exec(importUrl);\n  if (pathMatch) {\n    $currentProjectPath.val(pathMatch[1]);\n  }\n};\n\nconst bindEvents = () => {\n  const $newProjectForm = $('#new_project');\n  const $projectImportUrl = $('#project_import_url');\n  const $projectPath = $('#project_path');\n  const $useTemplateBtn = $('.template-button > input');\n  const $projectFieldsForm = $('.project-fields-form');\n  const $selectedTemplateText = $('.selected-template');\n  const $changeTemplateBtn = $('.change-template');\n  const $selectedIcon = $('.selected-icon');\n  const $templateProjectNameInput = $('#template-project-name #project_path');\n  const $pushNewProjectTipTrigger = $('.push-new-project-tip');\n  const $projectTemplateButtons = $('.project-templates-buttons');\n\n  if ($newProjectForm.length !== 1) {\n    return;\n  }\n\n  $('.how_to_import_link').on('click', (e) => {\n    e.preventDefault();\n    $(e.currentTarget).next('.modal').show();\n  });\n\n  $('.modal-header .close').on('click', () => {\n    $('.modal').hide();\n  });\n\n  $('.btn_import_gitlab_project').on('click', () => {\n    const importHref = $('a.btn_import_gitlab_project').attr('href');\n    $('.btn_import_gitlab_project').attr('href', `${importHref}?namespace_id=${$('#project_namespace_id').val()}&path=${$projectPath.val()}`);\n  });\n\n  if ($pushNewProjectTipTrigger) {\n    $pushNewProjectTipTrigger\n      .removeAttr('rel')\n      .removeAttr('target')\n      .on('click', (e) => { e.preventDefault(); })\n      .popover({\n        title: $pushNewProjectTipTrigger.data('title'),\n        placement: 'bottom',\n        html: true,\n        content: $('.push-new-project-tip-template').html(),\n      })\n      .on('shown.bs.popover', () => {\n        $(document).on('click.popover touchstart.popover', (event) => {\n          if ($(event.target).closest('.popover').length === 0) {\n            $pushNewProjectTipTrigger.trigger('click');\n          }\n        });\n\n        const target = $(`#${$pushNewProjectTipTrigger.attr('aria-describedby')}`).find('.js-select-on-focus');\n        addSelectOnFocusBehaviour(target);\n\n        target.focus();\n      })\n      .on('hide.bs.popover', () => {\n        $(document).off('click.popover touchstart.popover');\n      });\n  }\n\n  function chooseTemplate() {\n    $projectTemplateButtons.addClass('hidden');\n    $projectFieldsForm.addClass('selected');\n    $selectedIcon.empty();\n    const value = $(this).val();\n    const templates = {\n      rails: {\n        text: 'Ruby on Rails',\n        icon: '.template-option svg.icon-rails',\n      },\n      express: {\n        text: 'NodeJS Express',\n        icon: '.template-option svg.icon-node-express',\n      },\n      spring: {\n        text: 'Spring',\n        icon: '.template-option svg.icon-java-spring',\n      },\n    };\n\n    const selectedTemplate = templates[value];\n    $selectedTemplateText.text(selectedTemplate.text);\n    $(selectedTemplate.icon).clone().addClass('d-block').appendTo($selectedIcon);\n    $templateProjectNameInput.focus();\n  }\n\n  $useTemplateBtn.on('change', chooseTemplate);\n\n  $changeTemplateBtn.on('click', () => {\n    $projectTemplateButtons.removeClass('hidden');\n    $projectFieldsForm.removeClass('selected');\n    $useTemplateBtn.prop('checked', false);\n  });\n\n  $newProjectForm.on('submit', () => {\n    $projectPath.val($projectPath.val().trim());\n  });\n\n  $projectPath.on('keyup', () => {\n    hasUserDefinedProjectPath = $projectPath.val().trim().length > 0;\n  });\n\n  $projectImportUrl.keyup(() => deriveProjectPathFromUrl($projectImportUrl));\n};\n\nexport default {\n  bindEvents,\n  deriveProjectPathFromUrl,\n};\n","import initProjectVisibilitySelector from '../../../project_visibility';\nimport initProjectNew from '../../../projects/project_new';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initProjectVisibilitySelector();\n  initProjectNew.bindEvents();\n});\n"],"sourceRoot":""}